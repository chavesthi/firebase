
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User documents
    match /users/{userId} {
      allow create: if request.auth != null; // Allow user creation if authenticated (or allow all if open signup)
      allow read: if request.auth != null; // Logged-in users can read profiles (e.g., for chat name/photo)
      allow update: if request.auth != null && request.auth.uid == userId; // User can only update their own document
      allow delete: if request.auth != null && request.auth.uid == userId; // User can only delete their own document

      // Partner events
      match /events/{eventId} {
        allow read: if true; // Events are public
        allow create, update, delete: if request.auth != null && request.auth.uid == userId; // Only partner can manage their events

        // Check-ins for an event (partner-side)
        match /checkIns/{checkInId} {
          allow read, create, update, delete: if request.auth != null && request.auth.uid == userId; // Partner manages their event's check-ins
        }
      }

      // User's checked-in events (user-side record)
      match /checkedInEvents/{eventId} {
         allow read, create, update: if request.auth != null && request.auth.uid == userId; // User manages their check-in records
         allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's coupons
      match /coupons/{couponId} {
        allow read, create, update: if request.auth != null && request.auth.uid == userId; // User manages their own coupons
        // Partner can update status to 'redeemed' (logic handled by redeem-coupon function)
        // Deletion by partner is handled by partner-redeem-coupon page, needs rule if client-side
        allow delete: if request.auth != null && request.auth.uid == userId; // Or more specific if partner deletes
      }
    }

    // Event Ratings (Global Collection)
    // Document ID: eventId_userId
    match /eventRatings/{ratingId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create their own rating
      allow read: if true; // Ratings can be public (for average calculation and partner view)
      allow update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can manage their own rating
    }

    // Purchased Tickets (Global Collection)
    // Document ID: auto-generated
    match /purchasedTickets/{ticketId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create their own ticket record
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.partnerId); // User can read their tickets, Partner can read tickets for their events
        allow update: if request.auth != null && request.auth.uid == resource.data.partnerId; // Only Partner can update status (e.g., validate)
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId; // User can delete their own ticket if needed (or partner for admin reasons)
    }

    // Stripe Customer Data (managed by Firebase Stripe Extension)
    match /customers/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth != null && request.auth.uid == uid;
      }
       match /portals/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
    }
    
    // Chat Rooms and Messages
    match /chatRooms/{roomId} {
      allow read: if request.auth != null; // Any authenticated user can read a chat room (to see if it exists)
      // Creation of rooms can be implicit or restricted
      allow create: if request.auth != null; // Or more specific, e.g., only if user has city/state set

      match /messages/{messageId} {
        allow read: if request.auth != null && exists(/databases/$(database)/documents/chatRooms/$(roomId)); // User must be able to "access" the room
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Allow any authenticated user who can read the room to delete any message in it.
        // This is necessary for the client-side "clear all messages" functionality.
        // Consider the security implications: any user in the room can delete any message.
        allow delete: if request.auth != null && exists(/databases/$(database)/documents/chatRooms/$(roomId));
      }
    }
  }
}
