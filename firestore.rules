
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      // Anyone can create a user document (signup)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Only the authenticated user can read their own document
      // Partners can also read their own document
      // Other users can read public profile information of partners (e.g., for map display)
      allow read: if request.auth != null && (
                    request.auth.uid == userId ||
                    (resource.data.role == 'partner' && resource.data.questionnaireCompleted == true)
                  );
      // Only the authenticated user can update their own document
      allow update: if request.auth != null && request.auth.uid == userId;
      // Users can delete their own account
      allow delete: if request.auth != null && request.auth.uid == userId;

      // Subcollection: Events (for partners)
      match /events/{eventId} {
        allow read: if resource.data.visibility == true || (request.auth != null && request.auth.uid == userId);
        allow create, update, delete: if request.auth != null && request.auth.uid == userId && get(/databases/$(database)/documents/users/$(userId)).data.role == 'partner';

        // Subcollection: Check-ins (for partners to manage, users to create)
        match /checkIns/{checkInUserId} {
          allow read: if request.auth != null && request.auth.uid == userId; // Partner can read their event check-ins
          allow create: if request.auth != null && request.auth.uid == checkInUserId; // User can create their own check-in
          // No update/delete for simplicity, can be added if needed by partner
        }
      }

      // Subcollection: checkedInEvents (for users to see their own)
      match /checkedInEvents/{eventId} {
        allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }

      // Subcollection: coupons (for users to manage their own)
      match /coupons/{couponId} {
        allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // eventRatings collection (collectionGroup for queries by partnerId or eventId)
    // Users create ratings, partners read ratings for their events
    match /eventRatings/{ratingId} {
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId || // User can read their own rating
                    request.auth.uid == resource.data.partnerId   // Partner can read ratings for their events
                  );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Update/delete can be restricted or allowed for the user who created it
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // purchasedTickets collection
    // Users create tickets for themselves, partners might need to read ticket info for validation (if not done via checkInToken)
    match /purchasedTickets/{ticketId} {
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId || // User can read their own ticket
                    request.auth.uid == resource.data.partnerId   // Partner can read tickets for their events
                  );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Allow partners to update ticket status (e.g., to 'validated')
      allow update: if request.auth != null && request.auth.uid == resource.data.partnerId &&
                       request.resource.data.status != resource.data.status; // Only status change allowed by partner
      // Delete might be restricted
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId; // User can delete their ticket if needed
    }

    // Stripe Extension Collections (customers)
    // These rules are generally managed by the Stripe Firebase Extension,
    // but you might need to allow users to trigger creation of checkout_sessions.
    match /customers/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /checkout_sessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /subscriptions/{subscriptionId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Writes to subscriptions are handled by Stripe webhooks via the extension's Firebase Functions
      }
      match /payments/{paymentId} {
        allow read: if request.auth != null && request.auth.uid == userId;
      }
      match /portals/{portalId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Fallback: Deny all other accesses by default (important for security)
    // This is implicitly handled if no other rule matches.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
  }
}

    