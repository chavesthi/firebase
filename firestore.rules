
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      allow create: if request.auth != null; // Allow authenticated users to create their own user document
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(userId)).data.role == 'partner'); // Users can read their own data, anyone can read partner's public data
      allow update: if request.auth != null && request.auth.uid == userId; // Users can update their own data
      allow delete: if request.auth != null && request.auth.uid == userId; // Users can delete their own account data

      // Subcollection for partner events
      match /events/{eventId} {
        allow create, update, delete: if request.auth != null && request.auth.uid == userId && get(/databases/$(database)/documents/users/$(userId)).data.role == 'partner'; // Only partner who owns the user doc can manage events
        allow read: if true; // Allow anyone to read event details

        // Sub-subcollection for event check-ins
        match /checkIns/{checkInUserId} {
          allow create: if request.auth != null && request.auth.uid == checkInUserId; // Users can check themselves in
          allow read: if request.auth != null && (request.auth.uid == userId || request.auth.uid == checkInUserId) ; // Partner can read check-ins for their events, user can read their own
        }
      }

      // Subcollection for user's checked-in events (for rating purposes)
      match /checkedInEvents/{eventId} {
        allow create, update, read: if request.auth != null && request.auth.uid == userId; // User can manage their own list of checked-in events
        allow delete: if request.auth != null && request.auth.uid == userId;
      }

      // Subcollection for user's coupons
      match /coupons/{couponId} {
        allow create, read, update: if request.auth != null && request.auth.uid == userId; // User can manage their own coupons
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // EventRatings collection (ratings are per event, associated with a partner)
    match /eventRatings/{ratingId} { // ratingId is typically eventId_userId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can create their own rating
      allow read: if true; // Anyone can read ratings (for displaying average on event)
      allow update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid; // User can update/delete their own rating
    }

    // purchasedTickets collection removed as functionality is removed

    // Stripe extension collections
    match /customers/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
       match /payments/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
      match /portals/{id} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
    }

    // ChatRooms collection
    match /chatRooms/{roomId} {
      allow read: if request.auth != null; // Authenticated users can list/read chat rooms
      allow create: if request.auth != null; // Authenticated users can create chat rooms (implicitly by sending first message)
      
      match /messages/{messageId} {
        allow read: if request.auth != null && exists(/databases/$(database)/documents/chatRooms/$(roomId));
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Allow users to delete their own messages
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
    }
  }
}
